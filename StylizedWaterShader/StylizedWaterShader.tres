[gd_resource type="VisualShader" load_steps=27 format=2]

[ext_resource path="res://Scripts/DepthFade3D.gd" type="Script" id=1]
[ext_resource path="res://addons/shaderV/rgba/normalFromHeightmap.gd" type="Script" id=3]

[sub_resource type="VisualShaderNodeInput" id=1]
input_name = "fragcoord"

[sub_resource type="VisualShaderNodeInput" id=2]
input_name = "vertex"

[sub_resource type="VisualShaderNodeCustom" id=3]
script = ExtResource( 1 )

[sub_resource type="VisualShaderNodeVectorScalarMix" id=4]

[sub_resource type="VisualShaderNodeColorUniform" id=5]
uniform_name = "shallow_water"

[sub_resource type="VisualShaderNodeColorUniform" id=6]
uniform_name = "deep_water"

[sub_resource type="VisualShaderNodeInput" id=7]
input_name = "depth_texture"

[sub_resource type="VisualShaderNodeScalarUniform" id=8]
uniform_name = "refraction_speed"

[sub_resource type="VisualShaderNodeScalarUniform" id=9]
uniform_name = "refraction_scale"

[sub_resource type="VisualShaderNodeInput" id=10]
input_name = "time"

[sub_resource type="VisualShaderNodeTextureUniform" id=11]
output_port_for_preview = 0
uniform_name = "NoiseTexture"

[sub_resource type="VisualShaderNodeScalarUniform" id=12]
uniform_name = "refraction_strength"

[sub_resource type="VisualShaderNodeVectorOp" id=13]

[sub_resource type="VisualShaderNodeInput" id=14]
input_name = "fragcoord"

[sub_resource type="VisualShaderNodeScalarInterp" id=15]

[sub_resource type="VisualShaderNodeCustom" id=16]
output_port_for_preview = 0
default_input_values = [ 2, Vector3( 64, 64, 0 ), 3, 10, 4, false, 5, false, 6, false ]
script = ExtResource( 3 )

[sub_resource type="VisualShaderNodeInput" id=17]
input_name = "screen_texture"

[sub_resource type="VisualShaderNodeTexture" id=18]

[sub_resource type="VisualShaderNodeScalarUniform" id=19]
uniform_name = "beer_factor"

[sub_resource type="VisualShaderNodeVectorScalarMix" id=20]

[sub_resource type="VisualShaderNodeExpression" id=21]
size = Vector2( 578, 372 )
expression = "vec2 uv_movement = normal.xy;
uv_movement.xy += speed * time;

uv_movement *= scale;

result = vec3(uv_movement.x, 
					uv_movement.y, 0.0);
"

[sub_resource type="VisualShaderNodeInput" id=22]
input_name = "screen_uv"

[sub_resource type="VisualShaderNodeInput" id=23]
input_name = "projection"

[sub_resource type="VisualShaderNodeScalarUniform" id=24]
uniform_name = "water_depth"

[resource]
code = "shader_type spatial;
render_mode depth_draw_always, specular_schlick_ggx, ensure_correct_normals;

uniform vec4 shallow_water : hint_color;
uniform vec4 deep_water : hint_color;
uniform float beer_factor;
uniform float water_depth;
uniform sampler2D NoiseTexture;
uniform float refraction_strength;
uniform float refraction_speed;
uniform float refraction_scale;


// DepthFade3D

	
		float calc_depth_fade(sampler2D depth_tex, vec2 screen_uv, mat4 projection_matrix, 
						vec3 fragcoord, vec3 vertex, float beerFactor, float Distance) {
	
			float scene_depth = textureLod(depth_tex, screen_uv, 0.0).r;
			
			scene_depth = scene_depth * 2.0 - 1.0;
			scene_depth = projection_matrix[3][2] / (scene_depth + projection_matrix[2][2]);
			scene_depth = scene_depth + vertex.z; // z is negative
			
			// beers law
			scene_depth = exp(-scene_depth * beerFactor);
			
			float screen_depth = fragcoord.z;
			
			float depth_fade = (scene_depth - screen_depth) / Distance;
			
			depth_fade = clamp(depth_fade, 0.0, 1.0);
			
			return depth_fade;
		}
	
		
	
// NormalFromHeightmap

vec3 normalFromHeightmapFunc(vec2 _hm_uv, sampler2D _hm_tex, vec2 _hm_size, float _norm_hm_strgth, bool _conv_hm_gray, bool _inv_x_norm, bool _inv_y_norm){
	vec3 _hm_down = textureLod(_hm_tex, _hm_uv + vec2(0.0, 1.0 / _hm_size.y), 0.0).rgb;
	vec3 _hm_up = textureLod(_hm_tex, _hm_uv - vec2(0.0, 1.0 / _hm_size.y), 0.0).rgb;
	vec3 _hm_right = textureLod(_hm_tex, _hm_uv + vec2(1.0 / _hm_size.x, 0.0), 0.0).rgb;
	vec3 _hm_left = textureLod(_hm_tex, _hm_uv - vec2(1.0 / _hm_size.x, 0.0), 0.0).rgb;
	
	if (_conv_hm_gray) {
		_hm_down.r = 0.2126 * _hm_down.r + 0.7152 * _hm_down.g + 0.0722 * _hm_down.b;
		_hm_up.r = 0.2126 * _hm_up.r + 0.7152 * _hm_up.g + 0.0722 * _hm_up.b;
		_hm_right.r = 0.2126 * _hm_right.r + 0.7152 * _hm_right.g + 0.0722 * _hm_right.b;
		_hm_left.r = 0.2126 * _hm_left.r + 0.7152 * _hm_left.g + 0.0722 * _hm_left.b;
	}
	
	float dx = (1.0 - float(_inv_x_norm)) * (_hm_left.r - _hm_right.r) + 
				(float(_inv_x_norm)) * (-_hm_left.r + _hm_right.r);
	float dy = (1.0 - float(_inv_y_norm)) * (_hm_up.r - _hm_down.r) + 
				(float(_inv_y_norm)) * (-_hm_up.r + _hm_down.r);
	
	return normalize(vec3(dx, dy, 1.0 / _norm_hm_strgth));
}


void vertex() {
// Output:0

}

void fragment() {
// ColorUniform:18
	vec3 n_out18p0 = shallow_water.rgb;
	float n_out18p1 = shallow_water.a;

// ColorUniform:19
	vec3 n_out19p0 = deep_water.rgb;
	float n_out19p1 = deep_water.a;

// Input:2

// Input:6
	vec3 n_out6p0 = vec3(SCREEN_UV, 0.0);

// Input:7
	mat4 n_out7p0 = PROJECTION_MATRIX;

// Input:11
	vec3 n_out11p0 = FRAGCOORD.xyz;

// Input:13
	vec3 n_out13p0 = VERTEX;

// ScalarUniform:4
	float n_out4p0 = beer_factor;

// ScalarUniform:8
	float n_out8p0 = water_depth;

// DepthFade3D:16
	float n_out16p0;
	{
		n_out16p0 = calc_depth_fade(DEPTH_TEXTURE, n_out6p0.xy, n_out7p0, n_out11p0, n_out13p0, n_out4p0, n_out8p0);
	}

// VectorScalarMix:17
	vec3 n_out17p0 = mix(n_out18p0, n_out19p0, n_out16p0);

// ScalarMix:34
	float n_out34p0 = mix(n_out18p1, n_out19p1, n_out16p0);

// TextureUniform:27
	vec3 n_out27p0;
	float n_out27p1;
	{
		vec4 n_tex_read = texture(NoiseTexture, UV.xy);
		n_out27p0 = n_tex_read.rgb;
		n_out27p1 = n_tex_read.a;
	}

// ScalarUniform:29
	float n_out29p0 = refraction_strength;

// NormalFromHeightmap:36
	vec3 n_in36p2 = vec3(64.00000, 64.00000, 0.00000);
	bool n_in36p4 = false;
	bool n_in36p5 = false;
	bool n_in36p6 = false;
	vec3 n_out36p0;
	{
		n_out36p0 = normalFromHeightmapFunc(UV.xy, NoiseTexture, n_in36p2.xy, n_out29p0, n_in36p4, n_in36p5, n_in36p6);
	}

// ScalarUniform:21
	float n_out21p0 = refraction_speed;

// Input:24
	float n_out24p0 = TIME;

// ScalarUniform:22
	float n_out22p0 = refraction_scale;

// Expression:43
	vec3 n_out43p0;
	n_out43p0 = vec3(0.0, 0.0, 0.0);
	{
		vec2 uv_movement = n_out36p0.xy;
		uv_movement.xy += n_out21p0 * n_out24p0;
		
		uv_movement *= n_out22p0;
		
		n_out43p0 = vec3(uv_movement.x, 
							uv_movement.y, 0.0);
		
	}

// Input:31
	vec3 n_out31p0 = FRAGCOORD.xyz;

// VectorOp:30
	vec3 n_out30p0 = n_out43p0 + n_out31p0;

// Output:0
	ALBEDO = n_out17p0;
	ALPHA = n_out34p0;
	NORMALMAP = n_out30p0;

}

void light() {
// Output:0

}
"
graph_offset = Vector2( 137, -195 )
modes/depth_draw = 1
flags/ensure_correct_normals = true
nodes/fragment/0/position = Vector2( 2320, 60 )
nodes/fragment/2/node = SubResource( 7 )
nodes/fragment/2/position = Vector2( 320, -60 )
nodes/fragment/4/node = SubResource( 19 )
nodes/fragment/4/position = Vector2( 340, 340 )
nodes/fragment/6/node = SubResource( 22 )
nodes/fragment/6/position = Vector2( 320, 20 )
nodes/fragment/7/node = SubResource( 23 )
nodes/fragment/7/position = Vector2( 320, 80 )
nodes/fragment/8/node = SubResource( 24 )
nodes/fragment/8/position = Vector2( 360, 420 )
nodes/fragment/11/node = SubResource( 1 )
nodes/fragment/11/position = Vector2( 320, 160 )
nodes/fragment/13/node = SubResource( 2 )
nodes/fragment/13/position = Vector2( 320, 260 )
nodes/fragment/16/node = SubResource( 3 )
nodes/fragment/16/position = Vector2( 637, 54.75 )
nodes/fragment/17/node = SubResource( 4 )
nodes/fragment/17/position = Vector2( 1620, 0 )
nodes/fragment/18/node = SubResource( 5 )
nodes/fragment/18/position = Vector2( 960, -260 )
nodes/fragment/19/node = SubResource( 6 )
nodes/fragment/19/position = Vector2( 937, -113.25 )
nodes/fragment/21/node = SubResource( 8 )
nodes/fragment/21/position = Vector2( 940, 800 )
nodes/fragment/22/node = SubResource( 9 )
nodes/fragment/22/position = Vector2( 940, 960 )
nodes/fragment/24/node = SubResource( 10 )
nodes/fragment/24/position = Vector2( 960, 880 )
nodes/fragment/27/node = SubResource( 11 )
nodes/fragment/27/position = Vector2( 600, 380 )
nodes/fragment/29/node = SubResource( 12 )
nodes/fragment/29/position = Vector2( 640, 740 )
nodes/fragment/30/node = SubResource( 13 )
nodes/fragment/30/position = Vector2( 1840, 500 )
nodes/fragment/31/node = SubResource( 14 )
nodes/fragment/31/position = Vector2( 1540, 360 )
nodes/fragment/34/node = SubResource( 15 )
nodes/fragment/34/position = Vector2( 1540, 160 )
nodes/fragment/36/node = SubResource( 16 )
nodes/fragment/36/position = Vector2( 820, 440 )
nodes/fragment/37/node = SubResource( 17 )
nodes/fragment/37/position = Vector2( 1420, -280 )
nodes/fragment/38/node = SubResource( 18 )
nodes/fragment/38/position = Vector2( 1740, -220 )
nodes/fragment/40/node = SubResource( 20 )
nodes/fragment/40/position = Vector2( 1960, 180 )
nodes/fragment/43/node = SubResource( 21 )
nodes/fragment/43/position = Vector2( 1200, 500 )
nodes/fragment/43/size = Vector2( 578, 372 )
nodes/fragment/43/input_ports = "0,1,normal;1,0,speed;2,0,time;3,0,scale;"
nodes/fragment/43/output_ports = "0,1,result;"
nodes/fragment/43/expression = "vec2 uv_movement = normal.xy;
uv_movement.xy += speed * time;

uv_movement *= scale;

result = vec3(uv_movement.x, 
					uv_movement.y, 0.0);
"
nodes/fragment/connections = PoolIntArray( 2, 0, 16, 0, 6, 0, 16, 1, 7, 0, 16, 2, 11, 0, 16, 3, 13, 0, 16, 4, 4, 0, 16, 5, 8, 0, 16, 6, 16, 0, 17, 2, 18, 0, 17, 0, 19, 0, 17, 1, 18, 1, 34, 0, 19, 1, 34, 1, 16, 0, 34, 2, 37, 0, 38, 2, 34, 0, 0, 1, 17, 0, 40, 0, 27, 2, 36, 0, 29, 0, 36, 3, 36, 0, 43, 0, 21, 0, 43, 1, 24, 0, 43, 2, 22, 0, 43, 3, 43, 0, 30, 0, 17, 0, 0, 0, 31, 0, 30, 1, 30, 0, 0, 8 )
