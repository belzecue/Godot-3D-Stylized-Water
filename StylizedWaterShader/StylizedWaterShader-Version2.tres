[gd_resource type="VisualShader" load_steps=28 format=2]

[ext_resource path="res://Scripts/DepthFade3D.gd" type="Script" id=1]
[ext_resource path="res://Scripts/UVMovement.gd" type="Script" id=2]

[sub_resource type="VisualShaderNodeInput" id=1]
input_name = "fragcoord"

[sub_resource type="VisualShaderNodeInput" id=2]
input_name = "vertex"

[sub_resource type="VisualShaderNodeCustom" id=3]
script = ExtResource( 1 )

[sub_resource type="VisualShaderNodeVectorScalarMix" id=4]

[sub_resource type="VisualShaderNodeColorUniform" id=5]
uniform_name = "shallow_water"

[sub_resource type="VisualShaderNodeColorUniform" id=6]
uniform_name = "deep_water"

[sub_resource type="VisualShaderNodeInput" id=7]
input_name = "depth_texture"

[sub_resource type="VisualShaderNodeScalarUniform" id=8]
uniform_name = "refraction_speed"

[sub_resource type="VisualShaderNodeInput" id=9]
input_name = "time"

[sub_resource type="VisualShaderNodeInput" id=10]
input_name = "uv"

[sub_resource type="VisualShaderNodeScalarUniform" id=11]
uniform_name = "refraction_scale"

[sub_resource type="VisualShaderNodeTextureUniform" id=12]
uniform_name = "NoiseUV"

[sub_resource type="VisualShaderNodeScalarUniform" id=13]
uniform_name = "refraction_strength"

[sub_resource type="VisualShaderNodeVectorOp" id=14]
operator = 2

[sub_resource type="VisualShaderNodeInput" id=15]
input_name = "fragcoord"

[sub_resource type="VisualShaderNodeVectorOp" id=16]

[sub_resource type="VisualShaderNodeInput" id=17]
input_name = "screen_texture"

[sub_resource type="VisualShaderNodeTexture" id=18]

[sub_resource type="VisualShaderNodeScalarInterp" id=19]

[sub_resource type="VisualShaderNodeVectorScalarMix" id=20]

[sub_resource type="VisualShaderNodeCustom" id=21]
script = ExtResource( 2 )

[sub_resource type="VisualShaderNodeScalarUniform" id=22]
uniform_name = "beer_factor"

[sub_resource type="VisualShaderNodeInput" id=23]
input_name = "screen_uv"

[sub_resource type="VisualShaderNodeInput" id=24]
input_name = "projection"

[sub_resource type="VisualShaderNodeScalarUniform" id=25]
uniform_name = "water_depth"

[resource]
code = "shader_type spatial;
render_mode depth_draw_always, specular_schlick_ggx, ensure_correct_normals;

uniform float refraction_speed;
uniform float refraction_scale;
uniform sampler2D NoiseUV;
uniform float refraction_strength;
uniform sampler2D tex_frg_32;
uniform vec4 shallow_water : hint_color;
uniform vec4 deep_water : hint_color;
uniform float beer_factor;
uniform float water_depth;


// UVMovement

	
		vec3 movement(vec2 _uv, float time, float speed) {
			vec2 uv = _uv;
			uv.xy += time * speed;
			return vec3(uv.x, uv.y, 0.0);
		}
	
		
	
// DepthFade3D

	
		float calc_depth_fade(sampler2D depth_tex, vec2 screen_uv, mat4 projection_matrix, 
						vec3 fragcoord, vec3 vertex, float beerFactor, float Distance) {
	
			float scene_depth = textureLod(depth_tex, screen_uv, 0.0).r;
			
			scene_depth = scene_depth * 2.0 - 1.0;
			scene_depth = projection_matrix[3][2] / (scene_depth + projection_matrix[2][2]);
			scene_depth = scene_depth + vertex.z; // z is negative
			
			// beers law
			scene_depth = exp(-scene_depth * beerFactor);
			
			float screen_depth = fragcoord.z;
			
			float depth_fade = (scene_depth - screen_depth) / Distance;
			
			depth_fade = clamp(depth_fade, 0.0, 1.0);
			
			return depth_fade;
		}
	
		
	

void vertex() {
// Output:0

}

void fragment() {
// Input:29
	vec3 n_out29p0 = FRAGCOORD.xyz;

// Input:22
	float n_out22p0 = TIME;

// ScalarUniform:21
	float n_out21p0 = refraction_speed;

// ScalarUniform:25
	float n_out25p0 = refraction_scale;

// Input:23
	vec3 n_out23p0 = vec3(UV, 0.0);

// UVMovement:36
	vec3 n_out36p0;
	{
		n_out36p0 = movement(n_out22p0, n_out21p0, n_out25p0, n_out23p0);
	}

// TextureUniform:26
	vec3 n_out26p0;
	float n_out26p1;
	{
		vec4 n_tex_read = texture(NoiseUV, n_out36p0.xy);
		n_out26p0 = n_tex_read.rgb;
		n_out26p1 = n_tex_read.a;
	}

// ScalarUniform:27
	float n_out27p0 = refraction_strength;

// VectorOp:28
	vec3 n_out28p0 = n_out26p0 * vec3(n_out27p0);

// VectorOp:30
	vec3 n_out30p0 = n_out29p0 + n_out28p0;

// Input:31

// Texture:32
	vec4 tex_frg_32_read = texture(tex_frg_32, n_out30p0.xy);
	vec3 n_out32p0 = tex_frg_32_read.rgb;
	float n_out32p1 = tex_frg_32_read.a;

// ColorUniform:18
	vec3 n_out18p0 = shallow_water.rgb;
	float n_out18p1 = shallow_water.a;

// ColorUniform:19
	vec3 n_out19p0 = deep_water.rgb;
	float n_out19p1 = deep_water.a;

// Input:2

// Input:6
	vec3 n_out6p0 = vec3(SCREEN_UV, 0.0);

// Input:7
	mat4 n_out7p0 = PROJECTION_MATRIX;

// Input:11
	vec3 n_out11p0 = FRAGCOORD.xyz;

// Input:13
	vec3 n_out13p0 = VERTEX;

// ScalarUniform:4
	float n_out4p0 = beer_factor;

// ScalarUniform:8
	float n_out8p0 = water_depth;

// DepthFade3D:16
	float n_out16p0;
	{
		n_out16p0 = calc_depth_fade(DEPTH_TEXTURE, n_out6p0.xy, n_out7p0, n_out11p0, n_out13p0, n_out4p0, n_out8p0);
	}

// VectorScalarMix:17
	vec3 n_out17p0 = mix(n_out18p0, n_out19p0, n_out16p0);

// ScalarMix:34
	float n_out34p0 = mix(n_out18p1, n_out19p1, n_out16p0);

// VectorScalarMix:35
	vec3 n_out35p0 = mix(n_out32p0, n_out17p0, n_out34p0);

// Output:0
	ALBEDO = n_out35p0;
	ALPHA = n_out34p0;

}

void light() {
// Output:0

}
"
modes/depth_draw = 1
flags/ensure_correct_normals = true
nodes/fragment/0/position = Vector2( 2360, -400 )
nodes/fragment/2/node = SubResource( 7 )
nodes/fragment/2/position = Vector2( 920, -60 )
nodes/fragment/4/node = SubResource( 22 )
nodes/fragment/4/position = Vector2( 940, 340 )
nodes/fragment/6/node = SubResource( 23 )
nodes/fragment/6/position = Vector2( 920, 20 )
nodes/fragment/7/node = SubResource( 24 )
nodes/fragment/7/position = Vector2( 920, 80 )
nodes/fragment/8/node = SubResource( 25 )
nodes/fragment/8/position = Vector2( 960, 420 )
nodes/fragment/11/node = SubResource( 1 )
nodes/fragment/11/position = Vector2( 920, 160 )
nodes/fragment/13/node = SubResource( 2 )
nodes/fragment/13/position = Vector2( 920, 260 )
nodes/fragment/16/node = SubResource( 3 )
nodes/fragment/16/position = Vector2( 1240, 140 )
nodes/fragment/17/node = SubResource( 4 )
nodes/fragment/17/position = Vector2( 1680, -100 )
nodes/fragment/18/node = SubResource( 5 )
nodes/fragment/18/position = Vector2( 1200, -220 )
nodes/fragment/19/node = SubResource( 6 )
nodes/fragment/19/position = Vector2( 1240, -40 )
nodes/fragment/21/node = SubResource( 8 )
nodes/fragment/21/position = Vector2( 480, -540 )
nodes/fragment/22/node = SubResource( 9 )
nodes/fragment/22/position = Vector2( 500, -640 )
nodes/fragment/23/node = SubResource( 10 )
nodes/fragment/23/position = Vector2( 580, -380 )
nodes/fragment/25/node = SubResource( 11 )
nodes/fragment/25/position = Vector2( 500, -460 )
nodes/fragment/26/node = SubResource( 12 )
nodes/fragment/26/position = Vector2( 1160, -600 )
nodes/fragment/27/node = SubResource( 13 )
nodes/fragment/27/position = Vector2( 1160, -380 )
nodes/fragment/28/node = SubResource( 14 )
nodes/fragment/28/position = Vector2( 1400, -520 )
nodes/fragment/29/node = SubResource( 15 )
nodes/fragment/29/position = Vector2( 1380, -720 )
nodes/fragment/30/node = SubResource( 16 )
nodes/fragment/30/position = Vector2( 1640, -620 )
nodes/fragment/31/node = SubResource( 17 )
nodes/fragment/31/position = Vector2( 1540, -880 )
nodes/fragment/32/node = SubResource( 18 )
nodes/fragment/32/position = Vector2( 1860, -700 )
nodes/fragment/34/node = SubResource( 19 )
nodes/fragment/34/position = Vector2( 1760, 40 )
nodes/fragment/35/node = SubResource( 20 )
nodes/fragment/35/position = Vector2( 2080, -420 )
nodes/fragment/36/node = SubResource( 21 )
nodes/fragment/36/position = Vector2( 837.784, -544.304 )
nodes/fragment/connections = PoolIntArray( 2, 0, 16, 0, 6, 0, 16, 1, 7, 0, 16, 2, 11, 0, 16, 3, 13, 0, 16, 4, 4, 0, 16, 5, 8, 0, 16, 6, 16, 0, 17, 2, 19, 0, 17, 1, 18, 0, 17, 0, 26, 0, 28, 0, 27, 0, 28, 1, 29, 0, 30, 0, 28, 0, 30, 1, 31, 0, 32, 2, 30, 0, 32, 0, 18, 1, 34, 0, 19, 1, 34, 1, 16, 0, 34, 2, 32, 0, 35, 0, 17, 0, 35, 1, 34, 0, 35, 2, 34, 0, 0, 1, 35, 0, 0, 0, 36, 0, 26, 0, 23, 0, 36, 3, 25, 0, 36, 2, 21, 0, 36, 1, 22, 0, 36, 0 )
